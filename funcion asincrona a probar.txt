async function obtenerLugaresCercanos() {
  return new Promise(async (resolve, reject) => {
    try {
      // Crea una instancia del servicio de Places
      const service = new google.maps.places.PlacesService(map);
      let lugaresCercanos = [];

      for (const placeId of gimnasiosIds) {
        // Hacer una solicitud al servidor para obtener los detalles del lugar
        const place = await obtenerDetallesLugar(service, placeId);
        
        // Calcula la distancia entre la ubicación del usuario y el lugar
        const distance = calcularDistancia(userLocation, place.geometry.location);

        // Filtra los lugares que están a menos de 500 metros de distancia
        if (distance <= 10000) {
          // Agrega el lugar a la lista de lugares cercanos
          lugaresCercanos.push(place);
        }
      }

      // Muestra los lugares cercanos en la consola
      console.log(lugaresCercanos);

      resolve();
    } catch (error) {
      console.error(error);
      reject();
    }
  });
}

function obtenerDetallesLugar(service, placeId) {
  return new Promise((resolve, reject) => {
    service.getDetails(
      {
        placeId: placeId,
      },
      (place, status) => {
        if (status === google.maps.places.PlacesServiceStatus.OK) {
          resolve(place);
        } else {
          reject(new Error(`Error al obtener detalles del lugar: ${status}`));
        }
      }
    );
  });
}

async function encuentrame() {
  return new Promise((resolve, reject) => {
    // Si podemos utilizar la geolocalización, entramos al if
    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(async (position) => {
        try {
          // Obtenemos la latitud y la longitud del USUARIO
          latitud = position.coords.latitude;
          longitud = position.coords.longitude;
          userLocation = { lat: latitud, lng: longitud };

          // Pintamos el mapa en el documento HTML con los valores obtenidos de lat y lng
          map = new google.maps.Map(document.getElementById("map"), {
            center: userLocation,
            zoom: 12,
          });

          // Colocar un marcador en la ubicación del usuario
          let marker = new google.maps.Marker({
            position: userLocation,
            map: map,
            title: "Mi ubicación",
          });

          // Espera a que se completen todas las solicitudes de lugares cercanos
          await obtenerLugaresCercanos();

          resolve();
        } catch (error) {
          console.error(error);
          reject();
        }
      }, () => {
        // Si hay un error al obtener la ubicación del usuario, mostrar un mensaje de error en la consola
        console.log("Error: The Geolocation service failed.");
        reject();
      });
    } else {
      // Si el navegador no admite la API Geolocation, mostrar un mensaje de error en la consola
      console.log("Error: Your browser doesn't support geolocation.");
      reject();
    }
  });
}



Primero, definimos la función encuentrame(), la cual utiliza la API de geolocalización del navegador para obtener la ubicación del usuario. Si el navegador admite la API, se obtienen las coordenadas de latitud y longitud del usuario y se crea un mapa centrado en su ubicación. Si no se puede obtener la ubicación del usuario, se muestra un mensaje de error en la consola.

Luego, llamamos a la función obtenerLugaresCercanos(), que se encargará de obtener los detalles de lugares cercanos a la ubicación del usuario.

En obtenerLugaresCercanos(), creamos una instancia del servicio PlacesService de la API de Places de Google Maps y recorremos un arreglo de IDs de lugares para llamar a la función getDetails() de PlacesService y obtener los detalles de cada lugar. Esta función recibe como parámetros el ID del lugar y una función de callback que se ejecutará cuando se obtengan los detalles del lugar.

La función de callback recibe como parámetros el lugar y el estado de la solicitud. Si la solicitud es exitosa, se calcula la distancia entre la ubicación del usuario y el lugar y se filtran los lugares que estén a menos de 10 km de distancia del usuario.

Por último, utilizamos Promise.all() para esperar a que todas las solicitudes de detalles de lugares se completen antes de continuar. Una vez que se hayan obtenido los detalles de todos los lugares, se filtran los lugares que estén a menos de 10 km de distancia del usuario y se muestran en la consola.

También definimos las funciones calcularDistancia() y filtrarLugaresPorDistancia(). La primera función se encarga de calcular la distancia entre dos puntos en un plano utilizando la fórmula de la distancia euclidiana. La segunda función se encarga de filtrar los lugares que estén a menos de una distancia máxima del usuario.


